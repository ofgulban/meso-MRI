"""Simple layer profile plots."""

import os
import numpy as np
import nibabel as nb
import matplotlib.pyplot as plt

# Output nifti from 01_simulate_layers
FILE1 = "/media/faruk/Seagate Backup Plus Drive/DATA_MRI_NIFTI/derived/sub-05/T1/07_register_to_T2s/sub-05_ses-T1_MP2RAGE_uni_crop_ups2X_avg_reg.nii.gz"

# Metric file generated by LN2_LAYERS
FILE2 = "/media/faruk/Seagate Backup Plus Drive/DATA_MRI_NIFTI/derived/sub-05/T1_wholebrain/05_layers_columns/sub-05_ses-T2s_MP2RAGE_uni_segm_rim_reg_soi_CS_LH_v05_metric_equivol.nii.gz"
FILE3 = "/media/faruk/Seagate Backup Plus Drive/DATA_MRI_NIFTI/derived/sub-05/T1_wholebrain/05_layers_columns/sub-05_ses-T2s_MP2RAGE_uni_segm_rim_reg_soi_CS_LH_v05_layers_equivol.nii.gz"

# Column or area definitions
FILE4 = "/media/faruk/Seagate Backup Plus Drive/DATA_MRI_NIFTI/derived/sub-05/T1_wholebrain/05_layers_columns/sub-05_ses-T2s_MP2RAGE_uni_segm_rim_reg_soi_CS_LH_v05_columns32.nii.gz"

# =============================================================================
# Load image data, you can think of this as an activation map.
nii1 = nb.load(FILE1)
data = np.asarray(nii1.dataobj)
# Load normalized depths
nii2 = nb.load(FILE2)
norm_depth = np.asarray(nii2.dataobj)
# Load layers (quantized normalized depths)
nii3 = nb.load(FILE3)
layers = np.asarray(nii3.dataobj)
# Load columns
nii4 = nb.load(FILE4)
columns = np.asarray(nii4.dataobj)
# -----------------------------------------------------------------------------
# Reduce voxels
idx = columns > 0
data = data[idx]
norm_depth = norm_depth[idx]
layers = layers[idx]
columns = columns[idx]

# Derivatives
idx_layers = np.unique(layers)
nr_layers = 5
layer_bins = np.zeros(nr_layers)

idx_columns = np.unique(columns)
nr_columns = idx_columns.size

# Prepare plot data
layers_plot_data = np.zeros([nr_columns, nr_layers])
for i, j in enumerate(idx_columns):

    # Take voxels of a single column
    idx_roi = columns == j
    data_roi = data[idx_roi]
    norm_depth_roi = norm_depth[idx_roi]
    layers_roi = layers[idx_roi]

    # Quantize pooled normalized depths
    temp_layers = np.linspace(0, 1, nr_layers + 1)
    for n in range(0, nr_layers):
        temp_idx = norm_depth_roi >= temp_layers[n]
        temp_idx *= norm_depth_roi < temp_layers[n + 1]
        if np.sum(temp_idx) > 0:
            temp_mean = np.mean(data_roi[temp_idx])
        else:
            temp_mean = 0
        layers_plot_data[i, n] = temp_mean

        layers_roi[temp_idx] = temp_mean
    layers[idx_roi] = layers_roi

basename, ext = FILE4.split(os.extsep, 1)
img_out = np.zeros(nii1.shape)
img_out[idx] = layers
out = nb.Nifti1Image(img_out, header=nii1.header, affine=nii1.affine)
nb.save(out, "{}_test.{}".format(basename, ext))

# -----------------------------------------------------------------------------
# fig, (ax1, ax2) = plt.subplots(1, 2)

# Sort lines
# layers_plot_data = layers_plot_data[layers_plot_data[:, 2].argsort()]

# Prepare plot
plt.imshow(layers_plot_data.T, cmap="gray", aspect='auto', origin="lower",
           vmin=25, vmax=40)
plt.tight_layout()
plt.show()

print("Finished.")
